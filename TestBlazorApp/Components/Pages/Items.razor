@page "/items"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using ItemsBlazorApp.Services;
@using Models;
@using DevExpress.Blazor;

@inject ICommunicationService _communicationService;
@inject NavigationManager navigation;

<DxGrid 
        @ref="_grid"
        Data="_items"
        KeyFieldName="Id"
        EditModelSaving="SaveModel"
        DataItemDeleting="DeleteModel"
        EditMode="GridEditMode.EditRow"
        FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
        KeyboardNavigationEnabled="true">
    <Columns>
        <DxGridCommandColumn Width="160px" />
        <DxGridDataColumn FieldName="Name" />
        <DxGridDataColumn FieldName="Price" />
        <DxGridDataColumn FieldName="DateAdded" Caption="Date Added" />
    </Columns>
</DxGrid>

@code {
    private List<ItemViewModel?> _items;
    private IGrid _grid;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await _grid.StartEditRowAsync(0);
    }

    async Task SaveModel(GridEditModelSavingEventArgs e)
    {
        if (e.IsNew)
            await _communicationService.InsertItemAsync((ItemViewModel)e.EditModel);
        else
            await _communicationService.UpdateItemAsync((ItemViewModel)e.EditModel);

        await UpdateDataAsync();
    }

    async Task DeleteModel(GridDataItemDeletingEventArgs e)
    {
        await _communicationService.DeleteItemAsync(((ItemViewModel)e.DataItem).Id);
        await UpdateDataAsync();
    }

    async Task UpdateDataAsync()
    {
        try
        {
            _items = await _communicationService.GetAllAsync();
        }
        catch (Exception)
        {
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateDataAsync();
    }
}
