@page "/people"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations

@using Models;
@using DevExpress.Data;

@inject IDataAccessLayer data;
@inject IConfiguration config;

@inject NavigationManager navigation;


<h3>Add Person</h3>


<EditForm Model="@person" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Name:</label>
        <InputText id="name" @bind-Value="person.Name" />
        <ValidationMessage For="@(() => person.Name)" />
    </div>
    <div>
        <label>Gender:</label>
        <InputText id="gender" @bind-Value="person.Gender" />
        <ValidationMessage For="@(() => person.Gender)" />
    </div>
    <div>
        <label>Birthday:</label>
        <InputDate id="birthday" @bind-Value="person.Birthday" />
        <ValidationMessage For="@(() => person.Birthday)" />
    </div>

    <button class="btn btn-info" type="submit">Submit</button>
</EditForm>
<br />
<h3>People</h3>

@if (people == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Gender</th>
                <th>Birthday</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var person in people)
            {
                <tr>
                    @if (person.Id == editingPerson?.Id)
                    {
                        <td>
                            <InputText class="form-control" @bind-Value="editingPerson.Name" />
                        </td>
                        <td>
                            <InputSelect class="form-control" @bind-Value="editingPerson.Gender">

                                <option value="m">m</option>
                                <option value="f">f</option>
                                <option value="Other">Other</option>
                            </InputSelect>
                        </td>
                        <td>
                            <button class="btn btn-primary" @onclick="SaveEdit">Save</button>
                            <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                        </td>
                    }
                    else
                    {
                        <td>@person.Name</td>
                        <td>@person.Gender</td>
                        <td>@person.Birthday</td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => EditPerson(person)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => DeletePerson(person.Id)">Delete</button>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {

    
    private List<Person> people;
    private Person selectedPerson = new Person();
    private Person editingPerson = null;

    private void EditPerson(Person person)
    {
        editingPerson = new Person
            {
                Id = person.Id,
                Name = person.Name,
                Gender = person.Gender
            };
    }

    private async void SaveEdit()
    {
        if (editingPerson != null)
        {
            await data.UpdatePersonAsync(editingPerson);
            var person = people.FirstOrDefault(p => p.Id == editingPerson.Id);
            if (person != null)
            {
                person.Name = editingPerson.Name;
                person.Gender = editingPerson.Gender;
            }
            editingPerson = null;
        }
    }
    
    
    private void CancelEdit()
    {
        editingPerson = null;
    }
    private Person person = new Person();

    private async Task HandleValidSubmit()
    {
        try
        {
            await data.InsertPersonAsync(person);
            person = new Person();

            await OnInitializedAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }
    
    private async Task DeletePerson(int id)
    {
        await data.DeletePersonAsync(id);

        await OnInitializedAsync(); // Refresh the list
    }
   
    protected override async Task OnInitializedAsync()
    {
        
        people = await data.LoadData<Person, dynamic>(new { });
    }
}
